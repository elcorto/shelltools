" ~/.vimrc
"
" General purpose .vimrc for usage on, well, any Linux box we're working on.

"------------------------------------------------------------------------------
" General settings
"------------------------------------------------------------------------------

set nocompatible
behave xterm

let s:my_tw=79
let s:my_xterm="xterm-256color"

" System config files (/etc/vimrc etc.) are sourced first. Remove all annoyiny
" autocommands that may be defined there. If we like to define our own
" autocommands, place the definitions *after* this.
:au!

set modeline
set autoindent
set expandtab
set shiftwidth=4
set tabstop=4
set encoding=utf-8
set splitright
set ruler
set laststatus=2
set nojoinspaces
if &term == s:my_xterm
    set ttyfast
endif    

" Make search case-insensitive. Use \C in search pattern to switch case
" sensitivity on.
" set ignorecase

" set textwidth=s:my_tw does not work:
" vim's way to set an option to the value of a script 
" variable ... pretty awful; &textwidth (or &tw) is the current *value* of the
" option, lil bit like pointer dereferencing in C 
let &textwidth=s:my_tw

set formatoptions+=r2
" format items with '*' (while typing and with visual + gq):
"   * foo bar
"     baz
"   * bonk 
" Need to removed C-style /* .. * .. */ comments from 'comments' for that to
" work. Maybe there is a better way using also 'formatlistpat'? But so far, we
" don't code C, so we don't need the comments anyway.
set comments+=fb:*
set comments-=s1:/*,mb:*,ex:*/

" Use an autocommand for the vim file type (e.g. any vimrc) to add vim-script
" comments char `"'. Another option is to place 
"     setlocal comments+=:\"
" in ~/.vim/ftplugin/vim.vim . But fortunatelly, thers already is a vim
" ftplugin in /usr/share/vim/vimcurrent/ftplugin/vim.vim (Debian). In order to
" use that, enable plugins. How do we do that? See below under 'Plugins'.
"
""au FileType vim setlocal comments+=:\"

"------------------------------------------------------------------------------
" override some /etc/vimrc on openSUSE

set noshowmatch
" They set modlines=0 and therby disable modelines at all for security .. well
" ok. For the same reason, Debian also sets 'nomodeline' in /etc/vim/vimrc.
set modelines=5

"------------------------------------------------------------------------------
" Some Debian-stuff from /etc/vim/vimrc that we like.

" We want this file to be self-contained and cross-platform. So we need to set
" *all* stuff here. This is also useful for `vim -u ~/.vimrc`.
set backspace=indent,eol,start

"------------------------------------------------------------------------------
" Maps & commands
"------------------------------------------------------------------------------

" we use <F2> because CTRL-Tab doesn't work with xterm vim, only within gvim
" ... no idea why 
""map <C-Tab> :bn<CR>
map <F2> :bn<CR>

" spell checking: If we change anything in the file, we need to (L)oad it back
" and a %.bak file is created.
map <F4> :!aspell -l en_US -c %
map <F5> :!aspell -l de_DE -c %

" Some Visual filters to create nice boxes around the selected text w/
" boxes(1). `<bar>' has the function of the shell pipe `|'. See ~/.boxes .
" However, note that the file may not exists or the styles are not defined.
vmap ,bs !boxes -s 79 -d scite<CR>

" new command ':Vsb': `:vs` for buffers: like `:sb`, but split vertical
com -nargs=1 -complete=buffer Vsb :vert sb <args>

" `:sh` to open a shell with modified cmd prompt
if filereadable($HOME . '/.vim/subshell_bashrc')
    set shell=/bin/bash\ --rcfile\ ~/.vim/subshell_bashrc
endif    

" Toggle paste. Use 'pastetoggle'. This is from
" http://www.davidpashley.com/blog/computing/vim/vim-paste
"
" We *have to* use an F key for paastetoggle in vim 7.1: Smth like 'set
" pastetoggle=,p' (multi-value keys) does not work in vim 7.1 . In this case
" toggling paste with the sequence ',p' works only in Normal mode. In Insert
" mode, you insert ',p' :) That's why we must use an F key. This is fixed in
" vim 7.2 (check the Debian changelog).
"
" Note: The first 2 lines seem to be needed only by older vim versions (< 7.x).
" 7.x works with `set pastetoggle=<F6>` only.
nmap <F6> :set invpaste paste?<CR>
imap <F6> <C-O>:set invpaste<CR>
set pastetoggle=<F6>

" prevent cursor from jumping one character to the left when going from Insert
" to Normal mode
"
" edit: causes strange behavior when using the cursor keys sometimes
""inoremap <Esc> <Esc>l

"-----------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------

" Enable filetype plugins. The sourcing order is
"   ~/.vim/ftplugin/foo.vim
"   /usr/share/vim/vimcurrent/ftplugin/foo.vim
"   ~/.vim/after/ftplugin/foo.vim
" See the vim FAQ [1], section '26.3. How do I extend an existing filetype
" plugin?
" 
" [1] http://vimdoc.sourceforge.net/htmldoc/vimfaq.html

filetype plugin on
""let fortran_free_source=1

"-----------------------------------------------------------------------------
" Syntax hl
"-----------------------------------------------------------------------------

syntax on

" we want hl for light bg even if we have dark bg .. less stressful for the eye
" :)
set bg=light

" in ~/.bashrc, set `export TERM="xterm-256color"' to let vim know that we have
" a 256 color terminal, google for '256colors.pl' to see which color number
" (0-255) is what
if &term == s:my_xterm
    ""hi Comment ctermfg=darkgray
    ""hi Comment ctermfg=241
    hi Comment ctermfg=35
    ""hi Constant ctermfg=brown
    ""hi Statement ctermfg=yellow
else
    hi Comment ctermfg=darkgreen
endif    

" `:h sh.vim` 
" On Debian, sh (= standard Unix Bourne shell) == bash (Bourne Again shell).
" Tell Vim about that to avoid highlighting things as Error which are
" supported by bash but not by the Bourne shell: $(...), $((...)). 
" However, it still highlights this wrong, which is also valid bash:
"
" str="123456"
" echo ${str: -3}
"            ^^^  
" echo ${str:(-3)}
"            ^^^^
" echo ${str: (-3)}
"            ^^^^^
let g:is_bash = 1


" vim:ts=4:sw=4:tw=79:expandtab
